const path = require('path');\nconst MiniCssExtractPlugin = require('mini-css-extract-plugin');\nconst TerserPlugin = require('terser-webpack-plugin');\nconst CssMinimizerPlugin = require('css-minimizer-webpack-plugin');\nconst { BundleAnalyzerPlugin } = require('webpack-bundle-analyzer');\n\nmodule.exports = (env, argv) => {\n    const isProduction = argv.mode === 'production';\n    const isDevelopment = !isProduction;\n    \n    return {\n        entry: {\n            app: './src/app.js',\n            vendor: [\n                './src/core/Application.js',\n                './src/modules/ConfigModule.js',\n                './src/modules/LoggerModule.js'\n            ]\n        },\n        \n        output: {\n            path: path.resolve(__dirname, 'dist'),\n            filename: isProduction ? '[name].[contenthash].js' : '[name].js',\n            chunkFilename: isProduction ? '[name].[contenthash].chunk.js' : '[name].chunk.js',\n            clean: true,\n            publicPath: '/dist/'\n        },\n        \n        mode: isProduction ? 'production' : 'development',\n        \n        devtool: isProduction ? 'source-map' : 'eval-cheap-module-source-map',\n        \n        resolve: {\n            alias: {\n                '@': path.resolve(__dirname, 'src'),\n                '@core': path.resolve(__dirname, 'src/core'),\n                '@modules': path.resolve(__dirname, 'src/modules'),\n                '@styles': path.resolve(__dirname, 'src/styles'),\n                '@workers': path.resolve(__dirname, 'src/workers')\n            },\n            extensions: ['.js', '.json'],\n            fallback: {\n                'path': false,\n                'fs': false\n            }\n        },\n        \n        module: {\n            rules: [\n                {\n                    test: /\\.js$/,\n                    exclude: /node_modules/,\n                    use: {\n                        loader: 'babel-loader',\n                        options: {\n                            presets: [\n                                ['@babel/preset-env', {\n                                    targets: {\n                                        browsers: ['> 1%', 'last 2 versions', 'not dead']\n                                    },\n                                    useBuiltIns: 'usage',\n                                    corejs: 3\n                                }]\n                            ],\n                            plugins: [\n                                '@babel/plugin-proposal-class-properties',\n                                '@babel/plugin-proposal-private-methods'\n                            ]\n                        }\n                    }\n                },\n                {\n                    test: /\\.css$/,\n                    use: [\n                        isProduction ? MiniCssExtractPlugin.loader : 'style-loader',\n                        {\n                            loader: 'css-loader',\n                            options: {\n                                importLoaders: 1,\n                                sourceMap: true\n                            }\n                        },\n                        {\n                            loader: 'postcss-loader',\n                            options: {\n                                postcssOptions: {\n                                    plugins: [\n                                        ['autoprefixer'],\n                                        ['cssnano', { preset: 'default' }]\n                                    ]\n                                }\n                            }\n                        }\n                    ]\n                },\n                {\n                    test: /\\.(png|svg|jpg|jpeg|gif|ico)$/i,\n                    type: 'asset/resource',\n                    generator: {\n                        filename: 'images/[name].[hash][ext]'\n                    }\n                },\n                {\n                    test: /\\.(woff|woff2|eot|ttf|otf)$/i,\n                    type: 'asset/resource',\n                    generator: {\n                        filename: 'fonts/[name].[hash][ext]'\n                    }\n                },\n                {\n                    test: /\\.(ply|splat)$/i,\n                    type: 'asset/resource',\n                    generator: {\n                        filename: 'assets/[name].[hash][ext]'\n                    }\n                }\n            ]\n        },\n        \n        plugins: [\n            ...(isProduction ? [\n                new MiniCssExtractPlugin({\n                    filename: '[name].[contenthash].css',\n                    chunkFilename: '[name].[contenthash].chunk.css'\n                })\n            ] : []),\n            \n            ...(process.env.ANALYZE ? [\n                new BundleAnalyzerPlugin({\n                    analyzerMode: 'static',\n                    openAnalyzer: false,\n                    reportFilename: 'bundle-report.html'\n                })\n            ] : [])\n        ],\n        \n        optimization: {\n            minimize: isProduction,\n            minimizer: [\n                new TerserPlugin({\n                    terserOptions: {\n                        compress: {\n                            drop_console: isProduction,\n                            drop_debugger: isProduction,\n                            pure_funcs: isProduction ? ['console.log', 'console.info'] : []\n                        },\n                        format: {\n                            comments: false\n                        }\n                    },\n                    extractComments: false\n                }),\n                new CssMinimizerPlugin({\n                    minimizerOptions: {\n                        preset: [\n                            'default',\n                            {\n                                discardComments: { removeAll: true }\n                            }\n                        ]\n                    }\n                })\n            ],\n            \n            splitChunks: {\n                chunks: 'all',\n                cacheGroups: {\n                    vendor: {\n                        test: /[\\\\/]node_modules[\\\\/]/,\n                        name: 'vendors',\n                        chunks: 'all',\n                        priority: 10\n                    },\n                    core: {\n                        test: /[\\\\/]src[\\\\/]core[\\\\/]/,\n                        name: 'core',\n                        chunks: 'all',\n                        priority: 5\n                    },\n                    modules: {\n                        test: /[\\\\/]src[\\\\/]modules[\\\\/]/,\n                        name: 'modules',\n                        chunks: 'all',\n                        priority: 3\n                    },\n                    common: {\n                        name: 'common',\n                        minChunks: 2,\n                        chunks: 'all',\n                        priority: 1,\n                        reuseExistingChunk: true\n                    }\n                }\n            },\n            \n            runtimeChunk: {\n                name: 'runtime'\n            },\n            \n            usedExports: true,\n            sideEffects: false\n        },\n        \n        performance: {\n            hints: isProduction ? 'warning' : false,\n            maxEntrypointSize: 512000,\n            maxAssetSize: 512000\n        },\n        \n        stats: {\n            colors: true,\n            modules: false,\n            children: false,\n            chunks: false,\n            chunkModules: false\n        },\n        \n        devServer: {\n            static: {\n                directory: path.join(__dirname, 'dist')\n            },\n            compress: true,\n            port: 3001,\n            hot: true,\n            historyApiFallback: true,\n            open: false,\n            client: {\n                overlay: {\n                    errors: true,\n                    warnings: false\n                }\n            }\n        },\n        \n        externals: {\n            // Don't bundle Three.js as it's loaded from CDN\n            'three': 'THREE'\n        }\n    };\n};"